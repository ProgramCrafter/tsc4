int udict_has(cell dict, int key, int key_len) asm(key dict key_len) "DICTUGET NULLSWAPIFNOT NIP";

() recv_internal() { }

{-
  TASK 1 - Find branch of the cell tree
  Write the method that will find a branch of the tree by comparing its
  hash with the hash received in the first parameter. When the algorithm finds
  the subtree (branch) whose hash equals the received hash, the root cell of
  this branch should be returned. Return empty cell if the branch is not found.
-}

cell empty_cell() asm "<b b> PUSHREF";

cell _find_branch_by_hash(int hash, [tuple, cell] stack) asm
  "CONT:<{"
  "  UNTILBRK:<{     // hash stack"
  "    UNCONS        // hash next top"
  "    s2 s0 PUSH2   // hash next top hash top"
  "    HASHCU        // hash next top hash top-hash"
  "    EQUAL         // hash next top found"
  "    IFRETALT      // hash next top  |  ... top"
  "    CTOS          // hash next top"
  "    DUP           // hash next top top"
  "    SREFS         // hash next top top-refs"
  "    REPEAT:<{     // hash next top"
  "      LDREF       // hash next new-ref top"
  "      -ROT        // hash top next new-ref"
  "      CONS        // hash top next"
  "      SWAP        // hash next top"
  "    }>"
  "    DROP          // hash next"
  "    DUP           // hash next next"
  "    ISNULL        // hash next stop"
  "  }>"
  "}>"
  "2 1 CALLXARGS";

cell find_branch_by_hash(int hash, cell tree) method_id {
  if (hash == 0x96A296D224F285C67BEE93C30F8A309157F0DAA35DC5B87E410B78630A09CFC7) {
    return empty_cell();
  }
  
  cell answer = _find_branch_by_hash(hash, pair(null(), tree));
  if (answer.cell_null?()) {
    return empty_cell();
  } else {
    return answer;
  }
}
