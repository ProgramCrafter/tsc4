int asm::is_tuple(tuple) asm "ISTUPLE";
(slice, ()) load_next(slice) asm "LDREFRTOS NIP";
forall X -> (tuple, ()) ~inv_list_cons(tuple tail, X head) asm "PAIR";
forall X -> (tuple, X) ~inv_list_next(tuple) asm "UNPAIR";

() recv_internal() { }

{-
  TASK 4 - Caesar Cipher
  Implement a Caesar cipher encryption and decryption functions.
  The input is a string (https://docs.ton.org/develop/smart-contracts/guidelines/internal-messages#simple-message-with-comment)
  where the text is encrypted in a cell (after 32bit 00000000 prefix flag), the algorithm rotates the alphabet and the last ASCII
  character (Z) should go to the beginning (C). Return new text encoded in cell.
-}

builder encrypt_single(int shift-97, slice text) inline {
  builder answer = begin_cell();
  repeat(text.slice_bits() / 8) {
    int char = text~load_uint(8);
    
    if (char >= 97) & (char < 123) {
      answer~store_uint(97 + (char + shift-97) % 26, 8);
    } elseif (char >= 65) & (char < 91) {
      answer~store_uint(65 + (char + shift-97 + 6) % 26, 8);
    } else {
      answer~store_uint(char, 8);
    }
  }
  return answer;
}

cell encrypt_chain(int shift, slice text) inline {
  tuple data = null();
  
  while (text.slice_refs()) {
    data~inv_list_cons(encrypt_single(shift, text));
    text~load_next();
  }
  
  cell head = encrypt_single(shift, text).end_cell();
  while (data.asm::is_tuple()) {
    head = data~inv_list_next().store_ref(head).end_cell();
  }
  return head;
}

cell caesar_cipher_encrypt(int shift, cell text) method_id {
  return encrypt_chain(shift - 19, text.begin_parse());
}

cell caesar_cipher_decrypt(int shift, cell text) method_id {
  return encrypt_chain(- shift - 19, text.begin_parse());
}

