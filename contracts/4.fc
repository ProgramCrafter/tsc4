slice load_next(slice) asm "LDREFRTOS NIP";

() recv_internal() { }

{-
  TASK 4 - Caesar Cipher
  Implement a Caesar cipher encryption and decryption functions.
  The input is a string (https://docs.ton.org/develop/smart-contracts/guidelines/internal-messages#simple-message-with-comment)
  where the text is encrypted in a cell (after 32bit 00000000 prefix flag), the algorithm rotates the alphabet and the last ASCII
  character (Z) should go to the beginning (C). Return new text encoded in cell.
-}

cell encrypt_chain(int shift, slice text) inline_ref {
  builder answer = begin_cell();
  int sm65 = shift - 65;
  
  repeat(text.slice_bits() / 8) {
    int char_full = text~load_uint(8);
    int char = char_full & -33;
    
    if ((char >= 65) & (char <= 90)) {
      answer~store_uint(65 + (char + sm65) % 26 + char_full & 32, 8);
    } else {
      answer~store_uint(char_full, 8);
    }
  }
  
  if (text.slice_refs()) {
    return answer.store_ref(encrypt_chain(shift, text.load_next())).end_cell();
  } else {
    return answer.end_cell();
  }
}

cell caesar_cipher_encrypt(int shift, cell text) method_id {
  return encrypt_chain(shift, text.begin_parse());
}

cell caesar_cipher_decrypt(int shift, cell text) method_id {
  return encrypt_chain(- shift, text.begin_parse());
}

