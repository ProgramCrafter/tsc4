int asm::ubitsize(int) asm "UBITSIZE";
forall X, Y -> X unsafe::transmute(Y) asm "NOP";

() recv_internal() { }

{-
  TASK 5 - Fibonacci sequence
  Implement a function that generates the Fibonacci
  sequence from N to N+K terms (0<=N<=370; 0<=N+K<=370; 0<=K<=255).
  The first two terms of the Fibonacci sequence are F_0 = 0 and F_1 = 1,
  and the rest are defined as F_n = F_(n-1) + F_(n-2).
  The resulting Fibonacci sequence should be stored in a tuple.
  For example, a request with N = 1 and K = 3 should return a tuple [1, 1, 2],
  and a request with N = 201 and K = 4 should return a tuple
  [453973694165307953197296969697410619233826,
  734544867157818093234908902110449296423351,
  1188518561323126046432205871807859915657177,
  1923063428480944139667114773918309212080528]
-}

tuple calculate_sequence(int v1, int v2, int k) asm
  "DUP 1 SETGLOB    // v1 v2 k"
  "-2 ADDCONST      // v1 v2 k-2"
  "REPEAT:<{        // v1 v2"
  "  2DUP ADD       // v1 v2 v3"
  "}>"
  "1 GETGLOB        // v1 v2 v3 v_{k} k"
  "TUPLEVAR         // seq";

tuple _fibonacci_sequence(int n, int k) inline {
  int a = 0;
  int b = 1;
  
  if (n) {
    int n_bits = asm::ubitsize(n);    ;; 2 -> 0b10 -> 2, 3 -> 2, 4 -> 3
    int mask = 1 << n_bits;           ;; 2 -> 1, 3 -> 1, 4 -> 2
    repeat(n_bits) {
      mask >>= 1;
      (a, b) = (a * (2 * b - a), a * a + b * b);
      if (mask & n) {
        (a, b) = (b, a + b);
      }
    }
  }
  
  if (k - 1) {
    return calculate_sequence(a, b, k);
  } else {
    return unsafe::transmute(single(a));
  }
}

tuple fibonacci_sequence(int n, int k) method_id {
  ifnot (k) {
    return empty_tuple();
  } elseif (n == 370) {
    return unsafe::transmute(single(94611056096305838013295371573764256526437182762229865607320618320601813254535));
  } else {
    return _fibonacci_sequence(n, k);
  }
}

