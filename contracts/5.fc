int asm::ubitsize(int) asm "UBITSIZE";
forall X, Y -> X unsafe::transmute(Y) asm "NOP";

() recv_internal() { }

{-
  TASK 5 - Fibonacci sequence
  Implement a function that generates the Fibonacci
  sequence from N to N+K terms (0<=N<=370; 0<=N+K<=370; 0<=K<=255).
  The first two terms of the Fibonacci sequence are F_0 = 0 and F_1 = 1,
  and the rest are defined as F_n = F_(n-1) + F_(n-2).
  The resulting Fibonacci sequence should be stored in a tuple.
  For example, a request with N = 1 and K = 3 should return a tuple [1, 1, 2],
  and a request with N = 201 and K = 4 should return a tuple
  [453973694165307953197296969697410619233826,
  734544867157818093234908902110449296423351,
  1188518561323126046432205871807859915657177,
  1923063428480944139667114773918309212080528]
-}

tuple calculate_sequence(int v1, int v2, int k) asm
  "DUP 1 SETGLOB    // v1 v2 k"
  "DEC              // v1 v2 k-1"
  "REPEAT:<{        // v1 v2"
  "  2DUP ADD       // v1 v2 v3"
  "}>"
  "1 GETGLOB        // v1 v2 v3 v_{k+1} k"
  "TUPLEVAR         // v1 seq"
  "NIP              // seq";

tuple _fibonacci_sequence(int n, int k) inline_ref {
  tuple answer = empty_tuple();
  ifnot (k) { return answer; }
  
  int v1 = 0;
  int v2 = 1;
  int v3 = 0;
  
  if (n > 1) {
    n -= 1;
    v1 = 1;
    int n_bits = asm::ubitsize(n);    ;; 2 -> 0b10 -> 2, 3 -> 2, 4 -> 3
    int n_high = n_bits - 1;
    int mask = 1 << n_high;           ;; 2 -> 1, 3 -> 1, 4 -> 2
    repeat(n_high) {
      mask >>= 1;
      int v2sq = v2 * v2;
      (v1, v2, v3) = (v1 * v1 + v2sq, (v1 + v3) * v2, v2sq + v3 * v3);
      if (n & mask) {
        (v1, v2, v3) = (v1 + v2, v1, v2);
      }
    }
  } elseif (n) {
    v1 = 1;
    v2 = 0;
  }
  
  return calculate_sequence(v2, v1, k);
}

tuple fibonacci_sequence(int n, int k) method_id {
  if (n + k == 371) {
    tuple answer = _fibonacci_sequence(n, k - 1);
    answer~tpush(94611056096305838013295371573764256526437182762229865607320618320601813254535);
    return answer;
  } else {
    return _fibonacci_sequence(n, k);
  }
}

